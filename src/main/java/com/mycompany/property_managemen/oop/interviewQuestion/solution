// Book.java
public class Book {
    private String title;
    private String author;
    private String isbn;
    private boolean isAvailable;

    public Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.isAvailable = true;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean isAvailable) {
        this.isAvailable = isAvailable;
    }
}

// Member.java
public abstract class Member {
    private String memberId;
    private String name;

    public Member(String memberId, String name) {
        this.memberId = memberId;
        this.name = name;
    }

    public String getMemberId() {
        return memberId;
    }

    public String getName() {
        return name;
    }

    public abstract int getMaxBooksAllowed();
}

// Student.java
public class Student extends Member {
    public Student(String memberId, String name) {
        super(memberId, name);
    }

    @Override
    public int getMaxBooksAllowed() {
        return 5; // Students can borrow up to 5 books
    }
}

// Faculty.java
public class Faculty extends Member {
    public Faculty(String memberId, String name) {
        super(memberId, name);
    }

    @Override
    public int getMaxBooksAllowed() {
        return 10; // Faculty members can borrow up to 10 books
    }
}

// Loan.java
import java.util.Date;

public class Loan {
    private Book book;
    private Member member;
    private Date loanDate;
    private Date dueDate;

    public Loan(Book book, Member member, Date loanDate, Date dueDate) {
        this.book = book;
        this.member = member;
        this.loanDate = loanDate;
        this.dueDate = dueDate;
    }

    public Book getBook() {
        return book;
    }

    public Member getMember() {
        return member;
    }

    public Date getLoanDate() {
        return loanDate;
    }

    public Date getDueDate() {
        return dueDate;
    }
}

// Library.java
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Library {
    private List<Book> books;
    private List<Member> members;
    private List<Loan> loans;

    public Library() {
        books = new ArrayList<>();
        members = new ArrayList<>();
        loans = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
    }

    public void registerMember(Member member) {
        members.add(member);
    }

    public boolean borrowBook(String isbn, String memberId) {
        Book book = findBookByIsbn(isbn);
        Member member = findMemberById(memberId);

        if (book != null && member != null && book.isAvailable()) {
            Loan loan = new Loan(book, member, new Date(), calculateDueDate());
            loans.add(loan);
            book.setAvailable(false);
            return true;
        }
        return false;
    }

    public void returnBook(String isbn) {
        Loan loan = findLoanByIsbn(isbn);
        if (loan != null) {
            loan.getBook().setAvailable(true);
            loans.remove(loan);
        }
    }

    private Book findBookByIsbn(String isbn) {
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                return book;
            }
        }
        return null;
    }

    private Member findMemberById(String memberId) {
        for (Member member : members) {
            if (member.getMemberId().equals(memberId)) {
                return member;
            }
        }
        return null;
    }

    private Loan findLoanByIsbn(String isbn) {
        for (Loan loan : loans) {
            if (loan.getBook().getIsbn().equals(isbn)) {
                return loan;
            }
        }
        return null;
    }

    private Date calculateDueDate() {
        // Simplified due date calculation (e.g., 14 days from today)
        long MILLIS_IN_A_DAY = 24 * 60 * 60 * 1000L;
        return new Date(System.currentTimeMillis() + 14 * MILLIS_IN_A_DAY);
    }
}
